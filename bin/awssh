#!/bin/bash
ECS_KEY="id_ed25519_prx_developer"
PROD_CLUSTER="infrastructure-cd-root-production-ECSClusterStack-15WO4KWS6T73G-ECSCluster-1NE8F25OIN3J2"
STAG_CLUSTER="infrastructure-cd-root-staging-ECSClusterStack-1PYSGW6HNNXL8-ECSCluster-1FUFTSWV85PLO"

export AWS_PROFILE=prx-legacy
export AWS_DEFAULT_REGION=us-east-1

function usage() {
  echo "Usage:"
  echo "  awssh <ec2-instance-id>"
  echo "  awssh [stag|prod] <service>"
  echo "  awssh [stag|prod] <service> <command>"
  echo ""
  echo "Examples:"
  echo "  awssh i-1234567890"
  echo "  awssh stag cms"
  echo "  awssh stag cms console"
  echo "  awssh stag cms host"
  echo ""
  echo "Notes:"
  echo "  command must be a valid ./bin/application - defaults to /bin/ash"
  echo "  using command = \"host\", you'll get a shell in the host ec2 server"
  exit 1
}

# find a running task to ssh into
function ssh_to_task() {
  CLUSTER="$1"
  MATCH_NAME="$2"
  RUN_CMD="$3"

  # match a service name
  SERVICES=`aws ecs list-services --cluster $CLUSTER --output json 2> /dev/null | jq -r ".serviceArns[]"`
  if [[ -n "$MATCH_NAME" ]]; then
    SERVICES=`printf "$SERVICES" | grep -i "$MATCH_NAME"`
  fi
  if [[ -z "$SERVICES" ]]; then
    echo "unable to find service match: $MATCH_NAME"
    exit 1
  fi
  SERVICE=`printf $SERVICES | head -1`

  # find instance id with this service name running on it
  ARN=`aws ecs list-tasks --cluster $CLUSTER --service-name $SERVICE --output json 2> /dev/null | jq -r ".taskArns[0]"`
  if [[ "$ARN" == "" || "$ARN" == "null" ]]; then
    echo "no running tasks for service $SERVICE"
    exit 1
  fi
  CONTAINER=`aws ecs describe-tasks --cluster $CLUSTER --tasks $ARN --output json | jq -r ".tasks[0].containerInstanceArn"`
  ID=`aws ecs describe-container-instances --cluster $CLUSTER --container-instances $CONTAINER --output json | jq -r ".containerInstances[0].ec2InstanceId"`

  ssh_to_ec2 $ID $MATCH_NAME $RUN_CMD
}

# ssh to an ec2 instance
function ssh_to_ec2() {
  ID="$1"
  MATCH_NAME="$2"
  RUN_CMD="$3"

  IP=`aws ec2 describe-instances --instance-ids $ID --output json | jq -r ".Reservations[0].Instances[0].PublicIpAddress"`
  if [[ "$IP" == "" ]]; then
    echo "instance $ID not found"
    exit 1
  fi

  if [[ -z "$MATCH_NAME" || "$RUN_CMD" == "host" ]]; then
    ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile /dev/null" -i ~/.ssh/$ECS_KEY ec2-user@${IP}
  else
    REAL_CMD="/bin/ash"
    if [[ "$MATCH_NAME" == "sphinx" || "$MATCH_NAME" == "networks" || "$MATCH_NAME" == "exchange" ]]; then
      REAL_CMD="/bin/bash"
    fi
    if [[ -n "$RUN_CMD" ]]; then
      REAL_CMD="./bin/application $RUN_CMD"
    fi
    echo "Connecting: $ID $MATCH_NAME $REAL_CMD"
    cols=250 # TODO: $(tput cols) isn't right
    rows=$(tput lines)

    CMD="docker exec -it \$(docker ps --filter name=$MATCH_NAME --quiet --latest) /bin/sh -c \"stty cols $cols rows $rows && $REAL_CMD\""
    ssh -t -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile /dev/null" -i ~/.ssh/$ECS_KEY ec2-user@${IP} "$CMD"
  fi
}

# run!
if [[ $1 == i-* ]]; then
  ssh_to_ec2 $1
elif [[ "$1" == "prod" ]]; then
  ssh_to_task $PROD_CLUSTER $2 $3
elif [[ "$1" == "stag" ]]; then
  ssh_to_task $STAG_CLUSTER $2 $3
else
  usage
fi
